ОБЪЕКТЫ

используются для хранения коллекций различных значений и более сложных сущностей.
Объект может быть создан с помощью фигурных скобок {...} с необязательным списком СВОЙСТВ.

СВОЙСТВО - это пара <ключ: значение>, где ключ - это строка(также называемая именем свойства), а значение можеть быть чем угодно.

Пустой объект можно создать используя один из двух вариантов синтаксиса:

let user = new Object() //синтаксис "конструктор объекта"
let user = {} //синтаксис "литерал объекта"

обычно используется вариант с фигурными скобками. ТАКОЕ ОБЪЯВЛЕНИЕ НАЗЫВАЮТ ЛИТЕРАЛОМ ОБЪЕКТА ИЛИ ЛИТЕРАЛЬНОЙ НОТАЦИЕЙ.

ЛИТЕРАЛЫ И СВОЙСТВА

ПРи использовании литерального синтаксиса {...} мы сразу можем поместить в объект несколько свойств в виде пар <ключ: значение>

let user = { //объект
  name: "John", // под ключом 'name' хранится значение 'John'
  age : 30 // под сключем 'age' хранится значение 30
}

Для обращения к свойствам используется запись <через точку>:

//получаем св-ва объекта:
alert( user.name) // Johm
alert( user.age) // 30

Значение может быть любого типа. 
user.isAdmin = true;

Для удаления св-ва мы можем использовать оператор delete:
delete user.age;

Имя св-ва может состоять из нескольких слов, но тогда оно должно быть заключено в кавычки:

let user = {
  name: "John",
  age: 30,
  "likes birds": true // имя св-ва из  нескольких слов должно быть в кавычках
}

Последнее св-во объекта может заканчиваться запятой:
let user = {
  name: "John",
  age: 30,
}
Это называется ВИСЯЧАЯ ЗАПЯТАЯ.(Упрощает добавление, удаление и перемещение свойств, так как все строки объекта становятся одинаковыми)

ОБЪЕКТ,ОБЪЯВЛЕННЫЙ КАК КОНСТАНТА,МОЖЕТ БЫТЬ ИЗМЕНЕН

Напрммер:

const user = {
  name: "John"
}

user.name = "Pete"

alert(user.name) //Pete

Объявление const защищает от изменений только саму переменную user, а не ее содержимое.

КВАДРАТНЫЕ СКОБКИ

Для св-в, имена которых состоят из нескольких слов, доступ к значению <через точку> не работает

user.likes birds = true //Вызовет синтаксическую ошибку

ключ не должен иметь пробелы, не начинался с цифры и не содержал специальные символы, кроме $ и _

есть альтернатива:

let user = {};
//присваиваем занчение свойству
user['likes birds'] = true;

//получение значения свойства
alert(user['likes birds']) //true

//удаление свойства
delete user['likes birds'];

ОБРАТИТЕ ВНИМАНИЕ что строка в квадратных скобках заключена в кавычки(можно в любой тип кавычек)

Квадратные скобки также позволяют обратитьсмя к свойству, имя которого может быть результатом выражения. 
Например имя св-ва может хранится в переменной:
let key = "likes birds"

//то же самое что и user["likes birds"] = true
user[key] = true

Пример:

let user = {
  name: "John",
  age: 30
};

let key = prompt("Что вы хотите узнать о пользователе?", "name");

// доступ к свойству через переменную
alert( user[key] ); // John (если ввели "name")

Запись «через точку» такого не позволяет:

let user = {
  name: "John",
  age: 30
};

let key = "name";
alert( user.key ); // undefined

Вычисляем св-ва
Мы можем использовать квадратные скобки в литеральной нотации для создания вычисляемого св-ва

let fruit = prompt("Какой фрукт купить?", "apple");

let bag = {
  [fruit]: 5 //имя св-ва будет взято из переменной fruit
}

alert( bag.apple) //5, если fruit = "apple"

Смысл вычисляемого св-ва прост: запись [fruit] означает, что имя св-ва необходимо взять из переменной fruit.at

если посетитель введет слово "appple", то в объекте bag теперь будет лежать св-ва {apple: 5}.

это также как:

let fruit = prompt("Какой фрукт купить?", "apple");
let bag = {};

// имя свойства будет взято из переменной fruit
bag[fruit] = 5;

Мы можем использовать и более сложные выражения в квадратных скобках:

let fruit = 'apple';
let bag = {
  [fruit + 'Computers']: 5 // bag.appleComputers = 5
};

Подведём итог: в большинстве случаев, когда имена свойств известны и просты, используется запись через точку. Если же нам нужно что-то более сложное, то мы используем квадратные скобки.

СВОЙСТВО ИЗ ПЕРЕМЕННОЙ

ЧАсто нам необходимо использовать существующие переменные как значение для св-в с тем же именем:

function makeUser(name, age) {
  return (
    name: name,
    age: age,
    // ...другие св-ва
  )
}

let user = makeUser("John", 30)
alert(user.name) // John

Для скоращение существуют КОРОТКИЕ СВ-ВА
вместе name:name мы можем написать просто name:

function makeUser(name, age) {
  return {
    name, //то же самое что name=name
    age, // то же самое что age=age
    // ...
  }
}

Мы можем использовать как обычные свойства, так и короткие в одном и том же объекте:

let user = {
  name,  // тоже самое, что и name:name
  age: 30
};