// `Behavior Driven Development (BDD)
// Давайте начнём с техники под названием Behavior Driven Development или, коротко, BDD.

// BDD – это три в одном: и тесты, и документация, и примеры использования.

// Чтобы понять BDD – рассмотрим практический пример разработки.`


// `Разработка функции возведения в степень — «pow»: спецификация`

describe("pow", function () {

  describe("возводит x в степень 3", function () {

    function makeTest(x) {
      let expected = x * x * x;
      it(`${x} в степени 3 будет ${expected}`, function () {
        assert.equal(pow(x, 3), expected);
      });
    }
    it("для отрицательных n возвращает NaN", function () {
      assert.isNaN(pow(2, -1));
    });

    it("для дробных n возвращает NaN", function () {
      assert.isNaN(pow(2, 1.5));
    });

    for (let x = 1; x <= 5; x++) {
      makeTest(x);
    }

  });

  // ... другие тесты. Можно писать и describe, и it блоки.
});

// `Спецификация состоит из трёх основных блоков:

// describe("заголовок", function() { ... })
// Какую функциональность мы описываем. В нашем случае мы описываем функцию pow. Используется для группировки рабочих лошадок – блоков it.

// it("описание", function() { ... })
// В первом аргументе блока it мы человеческим языком описываем конкретный способ использования функции, а во втором – пишем функцию, которая тестирует данный случай.

// assert.equal(value1, value2)
// Код внутри блока it, если функция работает верно, должен выполняться без ошибок.`


// `Процесс разработки
// Процесс разработки обычно выглядит следующим образом:

// Пишется начальная спецификация с тестами, проверяющими основную функциональность.
// Создаётся начальная реализация.
// Для запуска тестов мы используем фреймворк Mocha (подробнее о нём чуть позже). Пока функция не готова, будут ошибки. Вносим изменения до тех пор, пока всё не начнёт работать так, как нам нужно.
// Теперь у нас есть правильно работающая начальная реализация и тесты.
// Мы добавляем новые способы использования в спецификацию, возможно, ещё не реализованные в тестируемом коде. Тесты начинают «падать» (выдавать ошибки).
// Возвращаемся на шаг 3, дописываем реализацию до тех пор, пока тесты не начнут завершаться без ошибок.
// Повторяем шаги 3-6, пока требуемая функциональность не будет готова.`

// `ецификация в действии
// В этой главе мы будем пользоваться следующими JavaScript-библиотеками для тестов:

// Mocha – основной фреймворк. Он предоставляет общие функции тестирования, такие как describe и it, а также функцию запуска тестов.
// Chai – библиотека, предоставляющая множество функций проверки утверждений. Пока мы будем использовать только assert.equal.
// Sinon – библиотека, позволяющая наблюдать за функциями, эмулировать встроенные функции и многое другое. Нам она пригодится позднее.`