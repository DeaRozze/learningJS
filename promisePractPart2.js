// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é rejectPromise(arr), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ –ø—Ä–æ–º–∏—Å–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ç–æ–ª—å–∫–æ —Å —Ç–µ–º–∏ –ø—Ä–æ–º–∏—Å–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã (rejected).

function rejectPromise(arr) {
  return Promise.allSettled(arr).then((res) => {
    return res
      .filter((item) => item.status === "rejected")
      .map((item) => item.reason);
  });
}

const promises = [
  Promise.resolve(1),
  Promise.reject("–û—à–∏–±–∫–∞ 1"),
  Promise.resolve(2),
  Promise.reject("–û—à–∏–±–∫–∞ 2"),
];

rejectPromise(promises).then((rejectedPromises) => {
  console.log(rejectedPromises); // ["–û—à–∏–±–∫–∞ 1","–û—à–∏–±–∫–∞ 2"]
});

// –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–æ–≤
// –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é runSequentially, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ñ—É–Ω–∫—Ü–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏—Ö –ø—Ä–æ–º–∏—Å—ã, –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∏—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ.

function runSequentially(tasks) {
  return tasks.reduce((promiseChain, currentTask) => {
    return promiseChain.then((results) => {
      return currentTask().then((result) => {
        return [...results, result];
      });
    });
  }, Promise.resolve([]));
}

function asyncTask1() {
  return new Promise((resolve) => setTimeout(() => resolve(1), 1000));
}

function asyncTask2() {
  return new Promise((resolve) => setTimeout(() => resolve(2), 500));
}

function asyncTask3() {
  return new Promise((resolve) => setTimeout(() => resolve(3), 200));
}

runSequentially([asyncTask1, asyncTask2, asyncTask3]).then(console.log);
// –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: [1, 2, 3], –Ω–æ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—è–≤–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ

//  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
// –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é limitConcurrency(tasks, limit), –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–º–∏—Å—ã –º–∞–∫—Å–∏–º—É–º –≤ limit –ø–æ—Ç–æ–∫–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

function limitConcurrency(tasks, limit) {
  let activeCount = 0; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
  let result = [];
  let index = 0;

  return new Promise((resolve) => {
    function runNext() {
      if (index >= tasks.length && activeCount === 0) {
        resolve(result); // –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        return;
      }

      while (activeCount < limit && index < tasks.length) {
        const taskIndex = index;
        const task = tasks[index++];
        activeCount++;

        task()
          .then((res) => {
            result[taskIndex] = res;
          })
          .finally(() => {
            activeCount--;
            runNext(); // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É
          });
      }
    }

    runNext(); // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø–æ—Ä—Ü–∏—é
  });
}

const tasks = [
  () => new Promise((res) => setTimeout(() => res(1), 1000)),
  () => new Promise((res) => setTimeout(() => res(2), 500)),
  () => new Promise((res) => setTimeout(() => res(3), 200)),
  () => new Promise((res) => setTimeout(() => res(4), 100)),
];

limitConcurrency(tasks, 2).then(console.log);
// –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: [1, 2, 3, 4], –Ω–æ –Ω–µ –±–æ–ª–µ–µ 2 –ø—Ä–æ–º–∏—Å–æ–≤ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ

// –ü–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–º–∏—Å
// –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é firstResolved(promises), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–∏—Å–∞.
function firstResolved(promises) {
  return Promise.any(promises);
}
// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
const pr1 = new Promise((res, rej) => setTimeout(rej, 500, "–û—à–∏–±–∫–∞ 1"));
const pr2 = new Promise((res) => setTimeout(res, 300, "–£—Å–ø–µ—Ö 2"));
const pr3 = new Promise((res) => setTimeout(res, 700, "–£—Å–ø–µ—Ö 3"));

firstResolved([pr1, pr2, pr3]).then(console.log);
// –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: "–£—Å–ø–µ—Ö 2"

// –¶–µ–ø–æ—á–∫–∞ –ø—Ä–æ–º–∏—Å–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
// –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é handleWithRetry(fn, retries), –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é fn –∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –ø–æ–ø—ã—Ç–∫—É retries —Ä–∞–∑.
function handleWithRetry(fn, retries) {
  // –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é fn –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
  return new Promise((resolve, reject) => {
    function attemptFn(attemptsLeft) {
      fn()
        .then(resolve)
        .catch((error) => {
          if (attemptsLeft <= 1) {
            reject("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫: " + error);
          } else {
            attemptFn(attemptsLeft - 1); // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
          }
        });
    }

    attemptFn(retries); // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø–æ–ø—ã—Ç–∫—É
  });
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
let attempt = 0;
function unstableTask() {
  return new Promise((resolve, reject) => {
    attempt++;
    if (attempt < 3) reject("–û—à–∏–±–∫–∞ " + attempt);
    else resolve("–£—Å–ø–µ—Ö –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ " + attempt);
  });
}

handleWithRetry(unstableTask, 5).then(console.log).catch(console.error);
// –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: "–£—Å–ø–µ—Ö –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ 3"

// // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–º–∏—Å–æ–≤
// –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é groupPromises(promises), –∫–æ—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø—Ä–æ–º–∏—Å—ã –Ω–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ.
function groupPromises(promises2) {
  return Promise.allSettled(promises2).then((results) => {
    const grouped = { fulfilled: [], rejected: [] };

    results.forEach((result) => {
      if (result.status === "fulfilled") {
        grouped.fulfilled.push(result.value);
      } else if (result.status === "rejected") {
        grouped.rejected.push(result.reason);
      }
    });

    return grouped;
  });
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
const promises2 = [
  Promise.resolve("–£—Å–ø–µ—Ö 1"),
  Promise.reject("–û—à–∏–±–∫–∞ 1"),
  Promise.resolve("–£—Å–ø–µ—Ö 2"),
  Promise.reject("–û—à–∏–±–∫–∞ 2"),
];

groupPromises(promises2).then(console.log);
// –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
// {
//   fulfilled: ["–£—Å–ø–µ—Ö 1", "–£—Å–ø–µ—Ö 2"],
//   rejected: ["–û—à–∏–±–∫–∞ 1", "–û—à–∏–±–∫–∞ 2"]
// }

// –ó–∞–¥–∞—á–∞ 4: Promise.all —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
// –£—Å–ª–æ–≤–∏–µ:
// –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ–º–∏—Å –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Å –æ—à–∏–±–∫–æ–π, –≤–µ—Å—å Promise.all –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–π—Ç–∏ –≤ catch.

function fetchDataWithError() {
  return new Promise((resolve, reject) => {
    setTimeout(() => reject("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"), 1000);
  });
}

Promise.all([fetchData1(), fetchData2(), fetchDataWithError()])
  .then(console.log)
  .catch(console.error); // –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö

// –ó–∞–¥–∞—á–∞ 7: –ü—Ä–æ–º–∏—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–ª–±—ç–∫–∞
// –£—Å–ª–æ–≤–∏–µ:
// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fs.readFile —Å –ø—Ä–æ–º–∏—Å–∞–º–∏.

const fs = require("fs");

function readFileAsync(filename) {
  return new Promise((resolve, reject) => {
    fs.readFile(filename, "utf-8", (err, data) => {
      if (err) reject(err);
      else resolve(data);
    });
  });
}

readFileAsync("test.txt").then(console.log).catch(console.error);

async function loadJson(url) {
  let response = await fetch(url);

  if ((response.status = 200)) {
    let json = await response.json();
    return json;
  }

  throw new Error(response.status);
}

loadJson("no-such-user.json") // (3)
  .catch(alert); // Error: 404

// üîß –ó–∞–¥–∞—á–∞ 1: –ü—Ä–æ–º–∏—Å–∏—Ñ–∏—Ü–∏—Ä—É–π setTimeout
// –°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é delay(ms), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–∏—Å –∏ –∂–¥—ë—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥:
function delay(ms) {
  return new Promise((res) => setTimeout(res, ms));
}
delay(2000).then(() => console.log("–ü—Ä–æ—à–ª–æ 2 —Å–µ–∫—É–Ω–¥—ã"));

// üîß –ó–∞–¥–∞—á–∞ 2: –ü—Ä–æ–º–∏—Å–∏—Ñ–∏—Ü–∏—Ä—É–π —Ñ—É–Ω–∫—Ü–∏—é loadScript
// –ï—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è, –¥–æ–±–∞–≤–ª—è—é—â–∞—è <script> –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É:
// –°–¥–µ–ª–∞–π –ø—Ä–æ–º–∏—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é: loadScriptPromise(src), –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å await.
function loadScript(src, callback) {
  const script = document.createElement("script");
  script.src = src;
  script.onload = () => callback(null, script);
  script.onerror = () => callback(new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"));
  document.head.append(script);
}
async function loadScriptPromise(src) {
  return promisify(loadScript(src))
    .then((script) => console.log("SCRIPPT", script))
    .catch((e) => console.log("ERROR", e));
}

const test = await loadScriptPromise("https://example.com/script.js");

const { error } = require("console");
// üîß –ó–∞–¥–∞—á–∞ 3: –ü—Ä–æ–º–∏—Å–∏—Ñ–∏—Ü–∏—Ä—É–π —Ñ—É–Ω–∫—Ü–∏—é —Å Node.js
// –í–æ—Ç –ø—Ä–∏–º–µ—Ä Node.js-—Ñ—É–Ω–∫—Ü–∏–∏:
const fs = require("fs");

fs.readFile("example.txt", "utf8", (err, data) => {
  if (err) throw err;
  console.log(data);
});
// üîß –ù–∞–ø–∏—à–∏ promisify, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
function promisify(fn) {
  return function (...args) {
    return new Promise((res, rej) => {
      fn(...args, (err, data) => {
        if (err) rej(err);
        else res(data);
      });
    });
  };
}
const readFilePromise = promisify(fs.readFile);
const content = readFilePromise("example.txt", "utf8")
  .then((data) => console.log("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:", data))
  .catch((err) => console.error("–û—à–∏–±–∫–∞:", err));

// üîß –ó–∞–¥–∞—á–∞ 4: –ù–µ—Å–∫–æ–ª—å–∫–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ callback
// –ü—Ä–æ–º–∏—Å–∏—Ñ–∏—Ü–∏—Ä—É–π –µ—ë —Ç–∞–∫, —á—Ç–æ–±—ã Promise –≤–æ–∑–≤—Ä–∞—â–∞–ª –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞ [lat, lng].
// –î–æ–ø—É—Å—Ç–∏–º —É —Ç–µ–±—è –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è:

function promisify1(fn) {
  return function (...args) {
    return new Promise((res, rej) => {
      fn(...args, (err, ...result) => {
        if (err) rej(err);
        else res(result);
      });
    });
  };
}
function getCoordinates(callback) {
  // callback(null, lat, lng)
  callback(null, 59.9386, 30.3141);
}
const coordinates = promisify1(getCoordinates);
coordinates.then(([lat, lng]) => console.log("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:", lat, lng));

// üîß –ó–∞–¥–∞—á–∞ 5: –ù–∞–ø–∏—à–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é promisify
// –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –≤–µ—Ä—Å–∏—é —Ñ—É–Ω–∫—Ü–∏–∏ promisify, –∫–æ—Ç–æ—Ä–∞—è:
// –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤–∏–¥–∞ f(arg1, arg2..., callback)
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—É—é, –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é Promise
// –†–∞–±–æ—Ç–∞–µ—Ç —Å callback(err, result)
// –î–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
function promisify1(fn) {
  return function (...args) {
    return new Promise((res, rej) => {
      fn(...args, (err, result) => {
        if (err) rej(err);
        else res(result);
      });
    });
  };
}
const promisifiedFn = promisify(myFunc);
const result = await promisifiedFn(arg1, arg2);
